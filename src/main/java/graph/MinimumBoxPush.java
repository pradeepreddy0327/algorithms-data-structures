package graph;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

public class MinimumBoxPush {

    public static void main(String[] args) {
        MinimumBoxPush obj = new MinimumBoxPush();
        System.out.println(obj.minPushBox(new char[][]{{'#','#','#','#','#','#'},
               {'#','T','#','#','#','#'},
               {'#','.','.','B','.','#'},
               {'#','.','#','#','.','#'},
               {'#','.','.','.','S','#'},
               {'#','#','#','#','#','#'}}));
        System.out.println(obj.minPushBox(new char[][]{{'#','#','#','#','#','#'},
                                                       {'#','T','#','#','#','#'},
                                                       {'#','.','.','B','.','#'},
                                                       {'#','#','#','#','.','#'},
                                                       {'#','.','.','.','S','#'},
                                                       {'#','#','#','#','#','#'}}));
        System.out.println(obj.minPushBox(new char[][]{{'#','#','#','#','#','#'},
                                                       {'#','T','.','.','#','#'},
                                                       {'#','.','#','B','.','#'},
                                                       {'#','.','.','.','.','#'},
                                                       {'#','.','.','.','S','#'},
                                                       {'#','#','#','#','#','#'}}));

        System.out.println(obj.minPushBox(new char[][]{{'#','.','.','#','#','#','#','#'},
                                                       {'#','.','.','T','#','.','.','#'},
                                                       {'#','.','.','.','#','B','.','#'},
                                                       {'#','.','.','.','.','.','.','#'},
                                                       {'#','.','.','.','#','.','S','#'},
                                                       {'#','.','.','#','#','#','#','#'}}));

        System.out.println(obj.minPushBox(new char[][]{{'#','.','.','#','T','#','#','#','#'},
                                                       {'#','.','.','#','.','#','.','.','#'},
                                                       {'#','.','.','#','.','#','B','.','#'},
                                                       {'#','.','.','.','.','.','.','.','#'},
                                                       {'#','.','.','.','.','#','.','S','#'},
                                                       {'#','.','.','#','.','#','#','#','#'}}));

//        System.out.println(obj.minPushBox(new char[][]{{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
//                                                       {'#','.','.','.','.','.','.','.','.','.','.','.','#','#','#','#','#','#','#','#'},
//                                                       {'#','.','.','.','#','#','.','#','#','#','#','.','#','#','#','.','#','#','T','#'},
//                                                       {'#','.','.','.','.','.','.','#','.','#','.','.','#','#','#','.','#','#','.','#'},
//                                                       {'#','.','.','.','#','.','.','.','.','.','.','.','#','#','#','.','#','#','.','#'},
//                                                       {'#','.','#','.','.','.','.','.','.','.','.','.','#','#','#','.','#','#','.','#'},
//                                                       {'#','.','#','.','#','#','#','#','#','#','#','.','#','#','#','.','#','#','.','#'},
//                                                       {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#','.','.','#'},
//                                                       {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#','.','.','#'},
//                                                       {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
//                                                       {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#','.','.','#'},
//                                                       {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#','.','.','#'},
//                                                       {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#','.','.','#'},
//                                                       {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#','.','.','#'},
//                                                       {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#','.','.','#'},
//                                                       {'#','.','B','.','.','.','.','.','.','.','.','.','.','.','.','.','#','.','.','#'},
//                                                       {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#','.','.','#'},
//                                                       {'#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#','.','.','#'},
//                                                       {'#','.','.','.','.','.','.','.','S','.','.','.','.','.','.','.','#','.','.','#'},
//                                                       {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'}}));
    }

    private int[][] adjPoints = new int[][]{{-1, 0}, {0, -1}, {1, 0}, {0, 1}};

    public int minPushBox(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[] startingPosition = new int[4];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 'S') {
                    startingPosition[0] = i;
                    startingPosition[1] = j;
                } else if (grid[i][j] == 'B') {
                    startingPosition[2] = i;
                    startingPosition[3] = j;
                }
            }
        }
        Queue<int[]> q = new LinkedList<>();
        q.add(startingPosition);
        int step = 0;
        boolean[][][] visited = new boolean[m][n][4];
        while (!q.isEmpty()) {
            int len = q.size();
            while(len > 0) {
                int[] p = q.poll();

                grid[p[2]][p[3]] = 'B';
                int i = -1;
                for (int[] adj : adjPoints) {
                    i++;
                    int nbx = p[2] + adj[0];
                    int nby = p[3] + adj[1];
                    int npx = p[2] - adj[0];
                    int npy = p[3] - adj[1];
                    if (isValid(nbx, nby, m, n) && isValid(npx, npy, m, n)
                            && grid[nbx][nby] != '#' && grid[npx][npy] != '#' && !visited[nbx][nby][i]) {
                        if (!bfs(grid, new int[]{p[0], p[1]}, new int[]{npx, npy})) continue;
                        if (grid[nbx][nby] == 'T') return step + 1;
                        q.add(new int[]{p[2], p[3], nbx, nby});
                        visited[nbx][nby][i] = true;
                    }
                }
                len--;
                grid[p[2]][p[3]] = '.';
            }
            step++;
        }
        return -1;
    }
    private boolean isValid(int x, int y, int m, int n) {
        return x >= 0 && x < m && y >= 0 && y < n;
    }
    private boolean bfs(char[][] grid, int[] sp, int[] ep){
        int m = grid.length;
        int n = grid[0].length;
        Queue<int[]> q = new LinkedList<>();
        q.add(sp);
        boolean[][] v = new boolean[m][n];
        while(!q.isEmpty()){
            int[] cp = q.poll();
            v[cp[0]][cp[1]] = true;
            if(cp[0]==ep[0]&&cp[1]==ep[1]) return true;
            for (int[] adj : adjPoints) {
                int npx = cp[0] + adj[0];
                int npy = cp[1] + adj[1];
                if (isValid(npx,npy,m,n) && !v[npx][npy] && grid[npx][npy] != '#' && grid[npx][npy] != 'B'){
                    q.add(new int[]{npx,npy});
                }
            }
        }
        return false;
    }

}
